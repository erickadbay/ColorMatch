package com.bombapps.Color_Match;

import android.graphics.Canvas;
import android.graphics.Paint;

import java.util.Random;


/**
 * Card represents a colored rectangular element
 * located at the center of the screen which the
 * user matches to one of the four colored circles
 * at the sides of the screen.
 *
 * @author Robert
 * @version 1.5
 * @since 2015-02-27
 *
 */

public class Card
{

    /**
     * SIZE constant float value representing the size of the rectangle.
     *
     */

    private static final float SIZE = 1.35f;


    /**
     * DEFAULTNUMPATTERNATTR integer value representing the default number
     *                       of pattern attributes for a Card.
     *
     */

    private static final int DEFAULTNUMPATTERNATTR = 5;


    /**
     * color android.graphics.Paint instance representing the color of the card.
     *
     */

    private Paint color;


    /**
     * xCoordinate1 float value representing the left side's pixel x-coordinate of rectangle.
     * yCoordinate1 float value representing the left side's pixel y-coordinate of rectangle.
     * xCoordinate2 float value representing the right side's pixel x-coordinate of rectangle.
     * yCoordinate2 float value representing the right side's pixel y-coordinate of rectangle.
     *
     */

    private float xCoordinate1,
                  yCoordinate1,
                  xCoordinate2,
                  yCoordinate2;



    /**
     * Constructor for the Card class.
     *
     */

    public Card()
    {
        color = new Paint();

        float offsetFromCentre = SIZE * GameView.WIDTH/6;

        xCoordinate1 = GameView.WIDTH/2 - offsetFromCentre;
        yCoordinate1 = GameView.HEIGHT*0.625f - offsetFromCentre;
        xCoordinate2 = GameView.WIDTH/2 + offsetFromCentre;
        yCoordinate2 = GameView.HEIGHT*0.625f + offsetFromCentre;

        this.generateNewColor();
    }


    /**
     * Gets a random integer using random.nextInt method.
     *
     * @see java.util.Random
     *
     * @param low integer value representing the lowest
     *             value to start generating. Inclusive.
     *
     * @param high integer value representing the highest
     *              value to end generating. Exclusive.
     *
     * @return integer value representing the random integer generated by the
     *         random.nextInt method.
     *
     */

    private int getRandValue(int low, int high)
    {
        Random random = new Random();

        int randomInt = random.nextInt(high-low) + low;

        return randomInt;
    }


    /**
     * Generates a random color and checks if the generated
     * color is the same color as the previous. If it is the
     * method keeps generating a random color until they are
     * different.
     *
     */

    public void generateNewColor()
    {
        Paint currentColor = new Paint();
        currentColor.setColor(ColorsLoader
                .loadColorByInt(getRandValue(1, DEFAULTNUMPATTERNATTR)));

        while (currentColor.getColor() == color.getColor())
            currentColor.setColor(ColorsLoader
                    .loadColorByInt(getRandValue(1, DEFAULTNUMPATTERNATTR)));

        color = currentColor;
    }


    /**
     * Getter for the color of the card.
     *
     * @return color Paint instance representing the color of
     *               the card.
     *
     */

    public int getColorId()
    {
        return color.getColor();
    }


    /**
     * Draws to android's canvas.
     *
     * @see android.graphics.Canvas
     * @param canvas Canvas instance representing android.graphics.Canvas class.
     */

    public void draw(Canvas canvas)
    {
        canvas.drawRect(xCoordinate1, yCoordinate1, xCoordinate2, yCoordinate2, color);
    }

    public float getXCoord(){
        return 0.5f*GameView.WIDTH;
    }

    public float getYCoord(){
       return 0.625f*GameView.HEIGHT;
    }
}
